name: AI Issue Triage

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]
  workflow_dispatch:

jobs:
  triage:
    runs-on: ubuntu-latest
    # Don't run on issues created by bots
    if: github.event.issue.user.type != 'Bot'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install PyGithub openai python-dotenv azure-identity requests

    - name: Check if should triage
      id: check_labels
      run: |
        # Check if issue already has classification labels
        LABELS="${{ join(github.event.issue.labels.*.name, ',') }}"
        if [[ "$LABELS" == *"bug"* ]] || [[ "$LABELS" == *"feature-request"* ]] || [[ "$LABELS" == *"SR-Support Request"* ]]; then
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Wiki Assistant Resources
      run: |
        # Create vector store and assistant ID files from secrets
        echo '{"vector_store_id": "${{ secrets.VECTOR_STORE_ID }}"}' > vector_store_id.json
        echo '{"assistant_id": "${{ secrets.ASSISTANT_ID }}"}' > assistant_id.json
        
        # Wiki URL mapping is now in the repo
        ls -la wiki_url_mapping.json
        echo "Wiki mapping has $(wc -l < wiki_url_mapping.json) entries"

    - name: Triage Issue
      if: steps.check_labels.outputs.skip == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
        AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
        USE_MOCK_API: ${{ secrets.USE_MOCK_API || 'false' }}
      run: |
        python scripts/triage_enhanced.py ${{ github.event.issue.number }}
        
    - name: Process Comment Commands
      if: github.event_name == 'issue_comment'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if comment contains commands
        if echo "${{ github.event.comment.body }}" | grep -E "^/(override-classification|assign|mark-as-cri|create-repair-item|mark-duplicate|request-info)"; then
          python scripts/comment_commands.py ${{ github.event.issue.number }} ${{ github.event.comment.id }}
        fi